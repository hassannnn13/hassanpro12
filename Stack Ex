import java.util.Stack;

public class StackUtilities {

    public static String reverseText(String str) {
        Stack<Character> stack = new Stack<>();
        for (char ch : str.toCharArray()) {
            stack.push(ch);
        }

        StringBuilder reversed = new StringBuilder();
        while (!stack.isEmpty()) {
            reversed.append(stack.pop());
        }

        return reversed.toString();
    }

    public static int reverseDigits(int num) {
        Stack<Integer> stack = new Stack<>();
        int tempNum = num;

        while (tempNum != 0) {
            stack.push(tempNum % 10);
            tempNum /= 10;
        }

        int reversed = 0;
        int place = 1;
        while (!stack.isEmpty()) {
            reversed += stack.pop() * place;
            place *= 10;
        }

        return reversed;
    }

    public static int findElementPosition(Stack<Integer> stack, int target) {
        Stack<Integer> tempStack = new Stack<>();
        int position = -1;
        int idx = 0;

        while (!stack.isEmpty()) {
            int current = stack.pop();
            if (current == target && position == -1) {
                position = idx;
            }
            tempStack.push(current);
            idx++;
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }

        return position;
    }

    public static int topElement(Stack<Integer> stack) {
        if (!stack.isEmpty()) {
            return stack.peek();
        }
        return -1;
    }

    public static void main(String[] args) {
        System.out.println("Reversed Text: " + reverseText("world"));

        System.out.println("Reversed Number: " + reverseDigits(98765));

        Stack<Integer> numbers = new Stack<>();
        numbers.push(15);
        numbers.push(25);
        numbers.push(35);

        System.out.println("Element found at index: " + findElementPosition(numbers, 35));

        System.out.println("Top element in stack: " + topElement(numbers));
    }
}
